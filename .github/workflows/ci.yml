name: CI/CD Pipeline

on:
  push:
    branches: [main] # Task 6 requirement: trigger on main branch
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Code Linting with flake8
        run: |
          echo "Running flake8 linter..."
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=88
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        continue-on-error: false # Fail build if linting fails

      - name: Code Formatting Check with black
        run: |
          echo "Checking code formatting with black..."
          black --check --diff src/ tests/
        continue-on-error: false # Fail build if formatting fails

      - name: Run Unit Tests with pytest
        run: |
          echo "Running unit tests..."
          python -m pytest tests/ -v --tb=short --cov=src --cov-report=term-missing
        continue-on-error: false # Fail build if tests fail

      - name: Test API Import
        run: |
          echo "Testing API module imports..."
          python -c "
          try:
              from src.api.main import app
              from src.api.pydantic_models import CustomerData, PredictionResponse
              print('✅ API modules import successfully')
          except Exception as e:
              print(f'❌ Import error: {e}')
              exit(1)
          "

  # Optional: Docker build test
  docker-build-test:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t credit-risk-api:test .

      - name: Test Docker container
        run: |
          echo "Testing Docker container..."
          # Start container in background
          docker run -d --name test-api -p 8000:8000 credit-risk-api:test

          # Wait for container to start
          sleep 30

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Clean up
          docker stop test-api
          docker rm test-api

  # Summary job that fails if any previous job fails
  build-status:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build-test]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.lint-and-test.result }}" == "failure" ]]; then
            echo "❌ Linting or tests failed!"
            exit 1
          fi

          if [[ "${{ needs.docker-build-test.result }}" == "failure" ]]; then
            echo "❌ Docker build failed!"
            exit 1
          fi

          echo "✅ All checks passed!"
